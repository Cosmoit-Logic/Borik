# bot.py
import asyncio
import json
import logging
import traceback
import os
from contextlib import suppress
from playwright.async_api import async_playwright

from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
import database as db

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
current_alerts_state = {}
UKRAINE_REGIONS = [
    "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—É–≥–∞–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–∫–∞—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–º. –ö–∏—ó–≤", "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º"
]

MESSAGE_TYPES = {
    "alert_message": "üö® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É",
    "end_alert_message": "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–±—ñ–π",
    "artillery_message": "üí• –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞—Ä—Ç–æ–±—Å—Ç—Ä—ñ–ª",
    "end_artillery_message": "üî∞ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–±—ñ–π –∞—Ä—Ç–æ–±—Å—Ç—Ä—ñ–ª—É"
}

# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ---
class MessageSettings(StatesGroup):
    waiting_for_template = State()

# --- –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ ---
async def take_alert_map_screenshot() -> str | None:
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=True)
            page = await browser.new_page()
            await page.set_viewport_size({"width": 1280, "height": 900})
            await page.goto(config.ALERTS_MAP_URL, timeout=60000, wait_until="networkidle")
            
            screenshot_path = "alerts_map.png"
            await page.locator("#map").screenshot(path=screenshot_path)
            await browser.close()
            logging.info(f"–°–∫—Ä—ñ–Ω—à–æ—Ç –∫–∞—Ä—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {screenshot_path}")
            return screenshot_path
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É: {e}")
        return None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é ---

async def _get_main_settings_keyboard(channel_id: int) -> InlineKeyboardBuilder:
    builder = InlineKeyboardBuilder()
    builder.button(text="üèôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ä–µ–≥—ñ–æ–Ω–∏", callback_data=f"cfg_regions_{channel_id}")
    builder.button(text="üìù –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", callback_data=f"cfg_msg_menu_{channel_id}")
    builder.adjust(1)
    return builder

async def show_main_settings_menu(message: Message, channel_id: int):
    try:
        channel = await bot.get_chat(channel_id)
        title = channel.title
    except TelegramAPIError:
        title = f"ID: {channel_id}" # Fallback if bot is not admin in the chat anymore
        
    builder = await _get_main_settings_keyboard(channel_id)
    with suppress(TelegramAPIError):
        await message.edit_text(
            f"‚öôÔ∏è –ì–æ–ª–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–∞–Ω–∞–ª—É: <b>{title}</b>",
            reply_markup=builder.as_markup()
        )

async def _get_regions_keyboard(channel_id: int) -> InlineKeyboardBuilder:
    settings = db.get_channel_settings(channel_id)
    selected_regions, is_all_ukraine = [], settings and settings['regions'] == 'all'
    if not is_all_ukraine and settings and settings['regions']:
        try: selected_regions = json.loads(settings['regions'])
        except (json.JSONDecodeError, TypeError): selected_regions = []

    builder = InlineKeyboardBuilder()
    builder.button(text=f"{'‚úÖ ' if is_all_ukraine else ''}–í—Å—è –£–∫—Ä–∞—ó–Ω–∞", callback_data=f"sr_{channel_id}_all")
    
    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è callback_data
    for index, region in enumerate(UKRAINE_REGIONS):
        text = f"{'‚úÖ ' if region in selected_regions else ''}{region}"
        builder.button(text=text, callback_data=f"sr_{channel_id}_{index}")
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main_settings_{channel_id}")
    builder.adjust(1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1)
    return builder

async def show_message_settings_menu(message: Message, channel_id: int):
    settings = db.get_channel_settings(channel_id)
    text = "üìù <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.</b>\n\n–û–±–µ—Ä—ñ—Ç—å, —è–∫–∏–π —à–∞–±–ª–æ–Ω –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏. –ü–æ—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:\n\n"
    for key, value in MESSAGE_TYPES.items():
        text += f"{value}:\n<code>{settings[key]}</code>\n\n"
    
    builder = InlineKeyboardBuilder()
    for key, value in MESSAGE_TYPES.items():
        builder.button(text=f"‚úèÔ∏è {value.split(' ')[-1]}", callback_data=f"set_msg_{channel_id}_{key}")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main_settings_{channel_id}")
    builder.adjust(2, 2)

    with suppress(TelegramAPIError):
        await message.edit_text(text, reply_markup=builder.as_markup())

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π ---

@dp.my_chat_member()
async def on_bot_join_or_leave(update: ChatMemberUpdated):
    if update.new_chat_member.status in ["member", "administrator"]:
        db.add_known_channel(update.chat.id, update.chat.title)
    elif update.new_chat_member.status in ["left", "kicked"]:
        db.remove_known_channel(update.chat.id)

@dp.message(Command("add_admin"))
async def add_admin_command(message: Message):
    if message.from_user.id != config.BOT_OWNER_ID: return
    try:
        user_id = int(message.text.split()[1])
        db.add_admin(user_id)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id}</code> –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    except (IndexError, ValueError):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü—Ä–∏–∫–ª–∞–¥: <code>/add_admin 123456</code>")

@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥.\n\n"
                         "–©–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –∫–æ–º–∞–Ω–¥—É /settings.")

@dp.message(Command("settings"))
async def settings_command(message: Message, state: FSMContext):
    await state.clear()
    if message.chat.type != 'private':
        return await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç–æ–≤—É–π—Ç–µ –±–æ—Ç–∞ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.")
    if not db.is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≤–ª–∞—Å–Ω–∏–∫–∞.")

    known_channels, admin_channels = db.get_all_known_channels(), []
    for channel_id, channel_title in known_channels:
        with suppress(TelegramAPIError):
            member = await bot.get_chat_member(channel_id, message.from_user.id)
            if member.status in ['creator', 'administrator']:
                admin_channels.append((channel_id, channel_title))

    if not admin_channels:
        return await message.answer("–Ø –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫–∞–Ω–∞–ª—ñ–≤, –¥–µ –≤–∏ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ñ –∫—É–¥–∏ —è —Ç–µ–∂ –¥–æ–¥–∞–Ω–∏–π.")

    builder = InlineKeyboardBuilder()
    for channel_id, channel_title in admin_channels:
        builder.button(text=f"‚öôÔ∏è {channel_title}", callback_data=f"select_ch_{channel_id}")
    builder.adjust(1)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=builder.as_markup())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback'–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏) ---

@dp.callback_query(F.data.startswith("select_ch_"))
async def callback_select_channel(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[2])
    db.add_or_get_channel(channel_id)
    await show_main_settings_menu(callback.message, channel_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("back_to_main_settings_"))
async def callback_back_to_main_settings(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[4])
    await show_main_settings_menu(callback.message, channel_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("cfg_regions_"))
async def callback_configure_regions(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[2])
    builder = await _get_regions_keyboard(channel_id)
    await callback.message.edit_text("üèôÔ∏è –û–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–Ω—è:", reply_markup=builder.as_markup())
    await callback.answer()

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Ä–µ–≥–∏–æ–Ω–∞
@dp.callback_query(F.data.startswith("sr_"))
async def callback_set_region_by_index(callback: CallbackQuery):
    await callback.answer()
    
    parts = callback.data.split("_"); channel_id = int(parts[1])
    region_identifier = parts[2]
    
    settings = db.get_channel_settings(channel_id); is_all_ukraine = settings and settings['regions'] == 'all'
    selected_regions = []
    if not is_all_ukraine and settings and settings['regions']:
        try: selected_regions = json.loads(settings['regions'])
        except (json.JSONDecodeError, TypeError): selected_regions = []

    if region_identifier == "all":
        db.update_channel_regions(channel_id, 'all')
    else:
        try:
            region_index = int(region_identifier)
            region_name = UKRAINE_REGIONS[region_index]
            
            if is_all_ukraine:
                selected_regions = [region_name]
            else:
                if region_name in selected_regions: selected_regions.remove(region_name)
                else: selected_regions.append(region_name)
            db.update_channel_regions(channel_id, json.dumps(selected_regions))
        except (ValueError, IndexError):
            logging.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Ä–µ–≥—ñ–æ–Ω—É –≤ callback: {callback.data}")
            return
    
    builder = await _get_regions_keyboard(channel_id)
    with suppress(TelegramAPIError):
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith("cfg_msg_menu_"))
async def callback_msg_menu(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[3])
    await show_message_settings_menu(callback.message, channel_id)
    await callback.answer()

@dp.callback_query(F.data.startswith("set_msg_"))
async def callback_set_msg_template(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_"); channel_id = int(parts[2]); message_type = parts[3]
    settings = db.get_channel_settings(channel_id)
    
    await state.set_state(MessageSettings.waiting_for_template)
    await state.update_data(channel_id=channel_id, message_type=message_type)
    
    builder = InlineKeyboardBuilder(); builder.button(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_fsm_{channel_id}")
    await callback.message.edit_text(
        f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: <b>{MESSAGE_TYPES[message_type]}</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π —à–∞–±–ª–æ–Ω:\n<code>{settings[message_type]}</code>\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç. –í—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ <code>{region}</code>.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@dp.message(MessageSettings.waiting_for_template)
async def process_new_template(message: Message, state: FSMContext):
    if "{region}" not in message.text:
        return await message.answer("‚ùå **–ü–æ–º–∏–ª–∫–∞:** –≤–∞—à —Ç–µ–∫—Å—Ç –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–º—ñ–Ω–Ω—É <code>{region}</code>. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    data = await state.get_data(); channel_id = data['channel_id']; message_type = data['message_type']
    db.update_channel_message(channel_id, message_type, message.text)
    await state.clear()
    await message.answer("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
    await show_message_settings_menu(message, channel_id)

@dp.callback_query(F.data.startswith("cancel_fsm_"))
async def cancel_fsm(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
    channel_id = int(callback.data.split("_")[2])
    await show_message_settings_menu(callback.message, channel_id)

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

async def check_alerts():
    global current_alerts_state
    headers = {"Authorization": f"Bearer {config.API_TOKEN}"}
    api_url = "https://api.alerts.in.ua/v1/alerts/active.json"
    
    async with aiohttp.ClientSession(headers=headers) as session:
        while True:
            await asyncio.sleep(30)
            try:
                async with session.get(api_url) as response:
                    if response.status != 200:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ API: {response.status}"); continue
                    data = await response.json()
                    actual_alerts = {a['location_title']: a['alert_type'] for a in data.get("alerts", [])}
                    new_alerts = {r: t for r, t in actual_alerts.items() if r not in current_alerts_state}
                    ended_alerts = {r: t for r, t in current_alerts_state.items() if r not in actual_alerts}

                    if new_alerts or ended_alerts:
                        screenshot_path = await take_alert_map_screenshot()
                        if new_alerts:
                            logging.info(f"–ù–æ–≤—ñ —Ç—Ä–∏–≤–æ–≥–∏: {list(new_alerts.keys())}")
                            await notify_about_changes(new_alerts, "start", screenshot_path)
                        if ended_alerts:
                            logging.info(f"–í—ñ–¥–±–æ—ó —Ç—Ä–∏–≤–æ–≥: {list(ended_alerts.keys())}")
                            await notify_about_changes(ended_alerts, "end", screenshot_path)
                        if screenshot_path and os.path.exists(screenshot_path):
                            os.remove(screenshot_path)

                    current_alerts_state = actual_alerts
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ñ–π –∑–∞–¥–∞—á—ñ: {e}")

async def notify_about_changes(changes: dict, change_type: str, image_path: str | None):
    all_channels = db.get_all_channels()
    for channel in all_channels:
        channel_id, regions_to_track = channel['channel_id'], channel['regions']
        for region, alert_type in changes.items():
            if regions_to_track != 'all':
                try:
                    if region not in json.loads(regions_to_track): continue
                except (json.JSONDecodeError, TypeError): continue
            
            if change_type == "start":
                msg_template = channel['alert_message' if alert_type == "air_raid" else 'artillery_message']
            else:
                original_alert_type = current_alerts_state.get(region, "air_raid")
                msg_template = channel['end_alert_message' if original_alert_type == "air_raid" else 'end_artillery_message']
            
            message_text = msg_template.format(region=region)
            
            with suppress(TelegramAPIError):
                if image_path:
                    await bot.send_photo(channel_id, FSInputFile(path=image_path), caption=message_text)
                else:
                    text_with_link = message_text + f"\n\n<a href='{config.ALERTS_MAP_URL}'>–ú–∞–ø–∞ —Ç—Ä–∏–≤–æ–≥</a>"
                    await bot.send_message(channel_id, text_with_link, disable_web_page_preview=True)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

async def main():
    db.init_db()
    db.add_admin(config.BOT_OWNER_ID)
    logging.info(f"–í–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞ ({config.BOT_OWNER_ID}) –¥–æ–¥–∞–Ω–æ –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
    asyncio.create_task(check_alerts())
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
